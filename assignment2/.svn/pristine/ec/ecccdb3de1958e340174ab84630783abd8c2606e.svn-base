package pacman.game;

import java.util.*;
import pacman.board.PacmanBoard;
import pacman.ghost.*;
import pacman.hunter.Hunter;
import pacman.hunter.Phil;
import pacman.score.ScoreBoard;
import pacman.util.Position;

public class PacmanGame {
    // name of the author.
    private String author;
    // the game board.
    private PacmanBoard board;
    // a list of ghosts in the game/
    public List<Ghost> ghosts = new ArrayList<>();
    // a hunter.
    private Hunter hunter;
    // the level of the game.
    private int level;
    // amount of lives the player has.
    private int lives;
    // the score board of this game.
    private ScoreBoard scores;
    // special duration
    private int tick;
    // game title
    private String title;

    /**
     * Creates a new game with the given parameters and spawns
     * one of each type of ghost (Blinky, Clyde, Inky, Pinky).
     * The ghosts should be spawned at the ghost spawn point.
     * The game will start with:
     * a tick of 0.
     * a level of 0.
     * a set of 4 lives.
     * a empty scoreboard with a initial score of 0.
     * @param title game title.
     * @param author game author.
     * @param hunter hunter in the game.
     * @param board the game board.
     */
    public PacmanGame(String title, String author, Hunter hunter, PacmanBoard board) {
        this.tick = 0;
        this.level = 0;
        lives = 4;
        this.board = board;
        this.title = title;
        this.author = author;
        this.hunter = hunter;
        ghosts.add(new Blinky());
        ghosts.add(new Clyde());
        ghosts.add(new Inky());
        ghosts.add(new Pinky());
        scores = new ScoreBoard();
    }

    /**
     * Gets the number of times that tick has been called in the current game.
     * @return the current game tick value.
     */
    public int getTick() {
        return tick;
    }

    /**
     * get the title of the map.
     * @return title of the map.
     * @Ensures: result != null.
     */
    public String getTitle(){
        return this.title;
    }

    /**
     * get a list of ghosts.
     * @return a list of ghosts in the game
     */
    public List<Ghost> getGhosts() {
        return new ArrayList<>(ghosts);
    }

    /**
     * get hunter of the game
     * @return a mutable reference to the hunter
     */
    public Hunter getHunter() {
        return hunter;
    }

    /**
     * get map author.
     * @return author of the map.
     */
    public String getAuthor() {
        return author;
    }

    /**
     * get current level of the game.
     * @return current level.
     */
    public int getLevel() {
        return level;
    }
    /**
     * Gets the current score board.
     * @return a mutable reference to the score board.
     */
    public PacmanBoard getBoard() {
        return board;
    }

    /**
     * get the rest of lives player has
     * @return amount of lives the player currently has.
     */
    public int getLives() {
        return lives;
    }

    /**
     * Get the current score board.
     * @return a mutable reference to the score board.
     */
    public ScoreBoard getScores() {
        return scores;
    }

    /**
     * Sets the level of the game.
     * @param level to be set to.
     * @Ensures newLevel = max(0, givenLevel).
     */
    public void setLevel(int level) {
        this.level = level;
    }

    /**
     * Sets the lives of the current player.
     * @param lives to be set to.
     */
    public void setLives(int lives) {
        this.lives = lives;
    }

    /**
     * Resets the Game in the following way:
     * Lives is set to the default of 4.
     * Level is set to 0.
     * ScoreBoard is reset ScoreBoard.reset()
     * PacmanBoard is reset PacmanBoard.reset()
     * All entities are reset
     * All entity positions are set to their spawn locations.
     * The tick value is reset to zero.
     */
    public void reset() {
        this.lives = 4;
        this.level = 0;
        scores.reset();
        board.reset();
        hunter.reset();
        for (Ghost g : ghosts) {
            g.reset();
            g.setPosition(board.getGhostSpawn());
        }
    }

    /**
     * For each ghost in the game, set its phase to be Phase.
     * FRIGHTENED with a duration of Phase.FRIGHTENED.getDuration();
     */
    public void setGhostsFrightened() {
        for (Ghost g : ghosts)
            g.setPhase(Phase.FRIGHTENED,Phase.FRIGHTENED.getDuration());
    }

    /**
     * Tick If we do not have any lives (getLives() == 0) then do nothing.
     * Otherwise we do the following in this order:
     * The Hunter moves Hunter.move(PacmanGame).
     * For each ghost in the game, call Hunter.hit(Ghost)
     * The Ghosts that are alive move on even ticks Ghost.move(PacmanGame) getTick().
     * For each Ghost in the game, call Hunter.hit(Ghost) on the game's hunter.
     * For each ghost which is dead:
     * Reset the ghost.
     * Set the ghost's position to the ghost spawn position on the current board.
     * Add 200 points to the score.
     * If the hunter is dead,
     * then decrease the lives and reset all the entities and place them at their spawn points.
     * If the board is empty,
     * then increase the level and set the ticks to 0 and reset
     * the board and entities placing them at their spawn points.
     * If we did not increase the level then increase the tick value. See getTick()
     * Note: game should start at a tick count of zero.
     */
    public void tick() {
        while (getLives() != 0) {
            // hunter moves
            hunter.move(this);
            // call Hunter.hit() for each ghost.
            for (Ghost g : ghosts) {
                hunter.hit(g);
            }
            // move on even ticks for ghosts alive.
            for (Ghost g : ghosts) {
                if (!g.isDead() && (getTick()/2 == 0)) {
                    g.move(this);
                }
            }
            // call hit again when move.
            for (Ghost g : ghosts) {
                hunter.hit(g);
            }
            // do following operations for ghosts that were dead.
            for (Ghost g : ghosts) {
                if (g.isDead()) {
                    g.reset();
                    g.setPosition(board.getGhostSpawn());
                    scores.increaseScore(200);
                }
            }
            // do following operations for hunters died.
            if (hunter.isDead()) {
                lives--;
                //reset the entities.
                entitiesReset();
            }
            // reset the board and increase the level if board is empty.
            if (getBoard().isEmpty()) {
                level++;
                tick = 0;
                board.reset();
                entitiesReset();
            }
            tick++;
        }
    }
    /*
    reset all the entities.
     */
    private void entitiesReset() {
        hunter.reset();
        hunter.setPosition(board.getPacmanSpawn());
        for (Ghost g : ghosts) {
            g.reset();
            g.setPosition(board.getGhostSpawn());
        }
    }
}
