package pacman.game;

import pacman.board.PacmanBoard;
import pacman.ghost.Blinky;
import pacman.ghost.Ghost;
import pacman.hunter.Hunter;
import pacman.hunter.Phil;
import pacman.util.Position;

import java.io.*;

public class GameWriter {

    /**
     * Saves a PacmanGame to a writer using the following rules:
     * The first line of the file will be the Board block header: "[Board]".
     * Following this on the line below will be the width and height comma
     * separated with no leading zeros and no spaces.
     * After this on the next line is the Game Board which is to be the toString representation of the board.
     *
     * One blank line.
     * On the next line is the "[Game]" block which will output the following assignments
     * in order( title, author, lives, level, score, hunter, blinky, inky, pinky, clyde ).
     * The assignments are to have a single space before and after the equals sign.
     * The assignments for ( hunter, blinky, inky, pinky, clyde) are to be
     * the toString representation of these entities.
     * Each assignment is to be on its own line.
     *
     * One blank line.
     * The last block is the "[Scores]" block which should be output as a multiline list
     * of the scores where the name and value of the score are sperated by a ":".
     * The scores should be output sorted by Name ScoreBoard.getEntriesByName().
     * The last score should not have a newline.
     *
     * Note: All integers are to have no leading zeros.
     * @param writer to output the data to.
     * @param game to encode into the save data format.
     * @throws IOException during an issue with saving to the file.
     */
    public static void write(Writer writer, PacmanGame game) throws IOException {
        //write board information to the writer.
        writeBoard(writer, game);
        //write game information to the writer.
        writeGame(writer, game);
        //write score information to the writer.
        writeScores(writer, game);
        writer.close();
    }
    /*
    write board information to the writer.
     */
    private static void writeBoard(Writer writer, PacmanGame game) throws IOException {
        writer.write("[Board]");
        writer.append(System.lineSeparator());
        writer.write(game.getBoard().getWidth()+","+game.getBoard().getHeight());
        writer.append(System.lineSeparator());
        for (int i = 0; i < game.getBoard().getHeight(); i++) {
            for (int j = 0; j < game.getBoard().getWidth(); j++) {
                writer.append(game.getBoard().getEntry(new Position(i,j)).getChar());
            }
            writer.append(System.lineSeparator());
        }
    }
    /*
    write game information to the writer.
     */
    private static void writeGame(Writer writer, PacmanGame game) throws IOException {
        //write game attributes.
        writer.write("\n[Game]");
        writer.write(System.lineSeparator());
        writer.write("title = " + game.getTitle());
        writer.write(System.lineSeparator());
        writer.write("author = " + game.getAuthor());
        writer.write(System.lineSeparator());
        writer.write("ives = " + game.getLives());
        writer.write(System.lineSeparator());
        writer.write("level = " + game.getLevel());
        writer.write(System.lineSeparator());
        writer.write("score = " + game.getScores().getScore());
        writer.write(System.lineSeparator());
        Hunter hunter = game.getHunter();
        //write hunter specification.
        writer.write(String.format("hunter = %s,SPECIAL:%d,%s",hunter.toString(),
        hunter.getSpecialDurationRemaining(),hunter.getClass().getSimpleName()));
        writer.append(System.lineSeparator());

        for (int i = 0; i < game.getGhosts().size(); i++) {
            Ghost currentGhost = game.getGhosts().get(i);
            //write ghosts specification.
            writer.write(String.format("%s = %d,%d,%s,%s",currentGhost.getType(), currentGhost.getPosition().getX(),
            currentGhost.getPosition().getY(), currentGhost.getPhase(), currentGhost.getPhase().getDuration()));
            writer.append(System.lineSeparator());
        }
    }

    /*
    write score information to the writer.
     */
    private static void writeScores(Writer writer, PacmanGame game) throws IOException {
        writer.write("\n[scores]\r");
        for (String e : game.getScores().getEntriesByName()) {
            writer.write(e);
            writer.append(System.lineSeparator());
        }
        writer.write(System.lineSeparator());
    }


    public static void main(String[] args) throws IOException {
        Hunter tree = new Phil();
        PacmanGame game = new PacmanGame("aa","treece",tree, new PacmanBoard(4,4));
        game.getScores().setScore("ivy",0);
        write(new PrintWriter("C:\\Users\\Trrrr\\Desktop\\semester2\\CSSE7023\\out.txt"),game);
    }
}
